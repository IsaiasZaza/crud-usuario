// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://cetmae49_Admin:FjpWfMwpUajj@108.167.169.35:3306/cetmae49_cetmaBanco"
  shadowDatabaseUrl ="mysql://cetmae49_Admin:FjpWfMwpUajj@108.167.169.35:3306/cetmae49_shadow_database"
}

enum Role {
  ADMIN
  PROFESSOR
  ALUNO
}

model User {
  id             Int        @id @default(autoincrement())
  nome           String
  email          String     @unique
  senha          String
  role           Role       @default(ALUNO)
  estado         String     @default("Brasília-DF")
  sobre          String     @default("Bem-vindo(a) à Cetma")
  profilePicture String?
  createdAt      DateTime   @default(now())
  cpf            String     @unique // CPF único
  profissao      String    // Profissão do usuário
  purchases      Purchase[]
  courses        Course[]   @relation("UserCourses")
}

model Course {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  price       Float
  videoUrl    String? // URL ou caminho do vídeo (opcional)
  coverImage  String? // URL ou caminho da imagem de capa (opcional)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  purchases   Purchase[]
  users       User[]     @relation("UserCourses")
  parentCourseId Int? // ID do curso pai, opcional
  parentCourse   Course?  @relation("SubCourses", fields: [parentCourseId], references: [id])
  subCourses     Course[] @relation("SubCourses")
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  status    String // 'pending', 'paid', 'cancelled', etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Ebook {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  autor      String
  fileUrl     String
  price       String?  // URL do arquivo do eBook para download
  imageEbook  String? // URL da imagem de capa (opcional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
